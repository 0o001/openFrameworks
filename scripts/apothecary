#! /bin/bash
#
# this is the OpenFrameworks library apothecary,
# it mixes formulas and potions to build and update the C/C++ lib dependencies
#
# 2013 Dan Wilcox <danomatika@gmail.com>
#
# references:
#  http://stackoverflow.com/questions/12219001/standalone-shell-script-vs-shell-function
#  http://www.tldp.org/LDP/abs/html/comparison-ops.html
#  http://tldp.org/LDP/abs/html/fto.html
#  http://www.developer.com/open/article.php/631241/Linux-Console-Colors--Other-Tricks.htm
#  http://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash
#  http://stackoverflow.com/questions/64786/error-handling-in-bash
#

################################################################################
### VARIABLES

### GLOBAL VARS, for access inside formulas

# build settings
OS=`./ostype.sh`
if [ "$OS" == "windows" ] ; then
	TYPE="vs2010"
else
	TYPE=$OS
fi
ARCH=32 # for 32 or 64 bit

# xcode/ios specific
if [ "$OS" == "osx" ] ; then
	
	# xcode Developer root
	XS="xcode-select -print-path" # stupid hack to keep my syntax highlighting from breaking :P
	XCODE_DEV_ROOT=$($XS)
	
	# used when building some libs for osx
	OSX_SDK_VER=10.8
	OSX_MIN_SDK_VER=10.6

	# used when building for ios, the sdks you have installed are found in:
	# $XCODE_DEV_ROOT/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator#.#.sdk
	IOS_SDK_VER=6.1
	IOS_MIN_SDK_VER=5.1
fi

# full path to this script's dir
APOTHECARY_DIR=.

# full path to the dir of the current formula
FORMULA_DIR=

### PRIVATE VARS, for internal use

# paths relative to ths script
REL_LIBS_DIR=..
REL_FORMULAS_DIR=formulas
REL_CACHE_DIR=cache

# ansi console escape codes
CON_DEFAULT="\033[0m"
CON_BOLD="\033[1m"
CON_RED="\033[31m"
CON_YELLOW="\033[93m"
CON_GREEN="\033[32m"

# used to filter out bad build types
VALID_TYPES=( "osx" "linux" "linux64" "vs2010" "win_cb" "ios" "android" )

# nice, detailed help message
HELP="Usage: apothecary [options] command [libraries]

 this is the OpenFrameworks library apothecary
 it mixes formulas and potions to build and update OF C/C++ lib dependencies

 Commands:
  update		download, build, and copy library files
  clean 		clean the cache
  dist-clean		clean the cache and lib folder

 Options:
  -t	specify libary type when building, detects type from OS by default
  	valid types: osx, linux, linux64, vs2010, win_cb, ios, android

  -a	specify architecture, either 32 or 64 (default is 32 bit)
  	note: desktop only, this is ignored when type = ios or android

  -h    print this usage guide

 Examples:

  # update all libs in the formulas dir
  apothecary update

  # update only glew
  apothecary update glew
 
  # clean all downloaded lib src dirs in the cache
  apothecary clean

  # clean only assimp & glew in the cache
  apothecary clean assimp glew

  # clean glew from the cache and lib folder
  apothecary dist-clean glew

  # update freetype for ios 
  apothecary -t ios freetype

  # update assimp for 64bit OSX (maybe in the future ...)
  apothecary -t osx -a 64 assimp
"

################################################################################
#### SET ERROR HANDLING

#set -x # run script in debug mode

set -o pipefail  # trace ERR through pipes
set -o errtrace  # trace ERR through 'time command' and other functions
set -o nounset   # set -u : exit the script if you try to use an uninitialized variable
set -o errexit   # set -e : exit the script if any statement returns a non-true return value

# trap the killer signals so that we can exit with a good message
trap "trapSignal SIGHUP" SIGHUP
trap "trapSignal SIGINT" SIGINT
trap "trapSignal SIGTERM" SIGTERM

trapSignal() {
	echo
	echoError " Received signal $1"
	exit 1
}

# trap any script errors and exit
trap "trapError" ERR

trapError() {
	echo
	echoError " ^ Received error ^"
	exit 1
}

# console printing functions (with color)
echoError()		{
	echo -e "$CON_BOLD$CON_RED$1$CON_DEFAULT"
}
echoWarning()	{
	echo -e "$CON_BOLD$CON_YELLOW$1$CON_DEFAULT"
}
echoInfo()		{
	echo -e "$CON_BOLD$1$CON_DEFAULT"
}
echoSuccess()	{
	echo -e "$CON_BOLD$CON_GREEN$1$CON_DEFAULT"
}

################################################################################
#### PARSE COMMANDLINE

# from http://www.mkssoftware.com/docs/man1/getopts.1.asp
while getopts t:a:h opt ; do
	case "$opt" in
		t) # set the library build type
		   TYPE="$OPTARG" ;;
		a) # set the architecture
		   ARCH=$OPTARG ;;
		h) # print help and exit
		   echo "$HELP" ; exit 0 ;;
		[?]) # print help and exit 
			 echo "$HELP" ; exit 0 ;;
	esac
done
shift $(expr $OPTIND - 1)

# get command
if [ "$1" != "" ] ; then
	A_CMD=$1
else
	echo "$HELP"
	exit 0
fi
shift 1

################################################################################
### FUNCTIONS

# check if a given string matches anything in VALID_TYPES,
# bool result is set to second argument
function isValidType() {
	local i
	for i in "${VALID_TYPES[@]}" ; do
		if [ "$i" == "$1" ] ; then
			eval $2=1
			return
		fi
	done
	eval $2=0
}

# update a given library
function update() {

	local formula=$REL_FORMULAS_DIR/$1.sh
	FORMULA_DIR=$APOTHECARY_DIR/$REL_FORMULAS_DIR

	# check if the given lib name is even formula
	if [ ! -e $REL_FORMULAS_DIR/$1.sh ] ; then
		
		# is the given formula a dir?
		if [ -e $REL_FORMULAS_DIR/$1 -a -d $REL_FORMULAS_DIR/$1 ] ; then
			formula=$REL_FORMULAS_DIR/$1/$1.sh
			FORMULA_DIR=$APOTHECARY_DIR/$REL_FORMULAS_DIR/$1
		else
			echoError " No formula for lib \"$1\""
			exit 1
		fi
	fi

	# load a script & it's function implementations
	source $formula

	### DOWNLOAD

	# download src to cache
	echo
	echoInfo " ----- $1 -----"
	echoInfo " Downloading \"$1\""
	echo

	mkdir -p $REL_CACHE_DIR
	cd $REL_CACHE_DIR

	if [ -e $1 ] ; then
		echo "... skipping, src dir already exists"

	else
		download
		if [ ! -e $1 ] ; then
			echoError " It looks like downloading failed for \"$1\""
			exit 1
		fi
	fi

	### BUILD

	# run build command in src dir
	echo
	echoInfo " Building \"$1\""
	echo

	cd $1
	build
	cd $APOTHECARY_DIR/$REL_CACHE_DIR/$1

	### COPY

	# dest arg path relative to src dir
	echo
	echoInfo " Copying \"$1\""
	echo

	copy ../../$REL_LIBS_DIR/$1
	cd $APOTHECARY_DIR

	echo
	echoSuccess " Finished \"$1\""
}

# clean a given library from the cache
function clean() {

	# check if the given lib name is even a formula
	if [ ! -e $REL_FORMULAS_DIR/$1.sh -a ! -e $REL_FORMULAS_DIR/$1 ] ; then
		echoError " No formula for lib \"$1\""
		exit 1
	fi

	cd $REL_CACHE_DIR
	rm -rf $1*
	echoSuccess " Cleaned \"$1\" from cache"
	cd $APOTHECARY_DIR
}

# clean a given library from the cache and lib folder
function dist-clean() {

	# check if the given lib name is even a formula
	if [ ! -e $REL_FORMULAS_DIR/$1.sh -a ! -e $REL_FORMULAS_DIR/$1 ] ; then
		echoError " No formula for lib \"$1\""
		exit 1
	fi

	cd $REL_CACHE_DIR
	rm -rf $1*
	echoSuccess " Cleaned \"$1\" from cache"
	cd $APOTHECARY_DIR

	cd $REL_LIBS_DIR
	rm -rf $1
	echoSuccess " Cleaned \"$1\" from libs folder"
	cd $APOTHECARY_DIR
}

################################################################################
### GO

# check if we have a valid build type
typeIsValid=0 # bool
isValidType $TYPE typeIsValid
if [ $typeIsValid == 0 ] ; then
	echoError " Invalid build type: \"$TYPE\""
	exit 1
fi

# check if we have a valid arch
if [ $ARCH != 32 -a $ARCH != 64 ] ; then
	echoError " Invalid architecture: $ARCH"
	exit 1
fi

# change to the dir of this script
cd $(dirname $0)
APOTHECARY_DIR=$(pwd)

# handle commands
case "$A_CMD" in
	
	update)
		# process given libraries
		if [ $# -gt 0 ] ; then
			while [ $# -gt 0 ] ; do
				update $1
				shift 1
			done

		else # process all formulas
			for formula in $( ls -1 $REL_FORMULAS_DIR) ; do
				if [ ! -d $formula ] ; then # ignore directories 
					update "${formula%.*}" # removes file extension
				fi
			done
		fi ;;

	clean)
		# process given libraries
		if [ $# -gt 0 ] ; then
			while [ $# -gt 0 ] ; do
				clean $1
				shift 1
			done

		else # process all formulas
			for formula in $( ls -1 $REL_FORMULAS_DIR) ; do
				clean "${formula%.*}"
			done
		fi ;;

	dist-clean)
		# process given libraries
		if [ $# -gt 0 ] ; then
			while [ $# -gt 0 ] ; do
				dist-clean $1
				shift 1
			done

		else # process all formulas
			for formula in $( ls -1 $REL_FORMULAS_DIR) ; do
				dist-clean "${formula%.*}"
			done
		fi ;;

	*) echoError " Unknown command \"$A_CMD\"" ;;
esac

exit 0
